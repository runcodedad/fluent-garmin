name: Pre-release Build and Publish

on:
  push:
    branches: [ main ]
    paths: [ 'src/**', '.github/workflows/prerelease.yml' ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
    paths: [ 'src/**', '.github/workflows/prerelease.yml' ]

jobs:
  prerelease:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || (github.event.pull_request.merged == true) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore src/Fluent.Garmin.sln
      
    - name: Build
      run: dotnet build src/Fluent.Garmin.sln --configuration Release --no-restore
      
    - name: Test
      run: dotnet test src/Fluent.Garmin.sln --configuration Release --no-build --verbosity normal
      
    - name: Generate version
      id: version
      run: |
        # Extract version from csproj file
        BASE_VERSION=$(grep -oP '<Version>\K[^<]+' src/Fluent.Garmin/Fluent.Garmin.csproj)
        VERSION="${BASE_VERSION}-preview.${{ github.run_number }}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION (base: $BASE_VERSION)"
        
    - name: Pack NuGet package
      run: |
        echo "Packing with version: ${{ steps.version.outputs.version }}"
        dotnet pack src/Fluent.Garmin/Fluent.Garmin.csproj --configuration Release --no-build --output ./artifacts -p:PackageVersion=${{ steps.version.outputs.version }}
        echo "Generated packages:"
        ls -la ./artifacts/
      
    - name: Publish to GitHub Packages
      run: |
        dotnet nuget add source --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        dotnet nuget push ./artifacts/*.nupkg --source "github" --api-key ${{ secrets.GITHUB_TOKEN }} --skip-duplicate
        
    - name: Publish to NuGet.org (if API key is configured)
      run: |
        if [ -n "${{ secrets.NUGET_API_KEY }}" ]; then
          echo "Publishing pre-release version ${{ steps.version.outputs.version }} to NuGet.org..."
          dotnet nuget push ./artifacts/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
        else
          echo "NUGET_API_KEY not configured, skipping NuGet.org publish"
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Pre-release v${{ steps.version.outputs.version }}
        body: |
          Pre-release build of Fluent.Garmin library.
          
          **This is a pre-release version and may contain bugs or incomplete features.**
          
          ### Changes
          - Automated build from commit ${{ github.sha }}
          
          ### Installation
          
          **From NuGet.org:**
          ```bash
          dotnet add package Fluent.Garmin --version ${{ steps.version.outputs.version }}
          ```
          
          **From GitHub Packages:**
          ```bash
          dotnet add package Fluent.Garmin --version ${{ steps.version.outputs.version }} --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
          ```
        draft: false
        prerelease: true
        files: ./artifacts/*.nupkg