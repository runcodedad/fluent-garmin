name: Official Release

on:
  workflow_dispatch:
    inputs:
      release_notes:
        description: 'Release notes'
        required: false
        type: string
        default: 'Official release of Fluent.Garmin library.'

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version from csproj
      id: version
      run: |
        VERSION=$(grep -oP '<Version>\K[^<]+' src/Fluent.Garmin/Fluent.Garmin.csproj)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using version from csproj: $VERSION"
        
    - name: Validate version format
      run: |
        if [[ ! "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version in csproj must be in format X.Y.Z (e.g., 1.0.0)"
          echo "Current version: ${{ steps.version.outputs.version }}"
          exit 1
        fi
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Restore dependencies
      run: dotnet restore src/Fluent.Garmin.sln
      
    - name: Build
      run: dotnet build src/Fluent.Garmin.sln --configuration Release --no-restore
      
    - name: Test
      run: dotnet test src/Fluent.Garmin.sln --configuration Release --no-build --verbosity normal
      
    - name: Pack NuGet package
      run: dotnet pack src/Fluent.Garmin/Fluent.Garmin.csproj --configuration Release --no-build --output ./artifacts -p:PackageVersion=${{ steps.version.outputs.version }}
      
    - name: Publish to NuGet.org (if API key is configured)
      run: |
        if [ -n "${{ secrets.NUGET_API_KEY }}" ]; then
          echo "Publishing to NuGet.org..."
          dotnet nuget push ./artifacts/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
        else
          echo "NUGET_API_KEY not configured, skipping NuGet.org publish"
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ${{ github.event.inputs.release_notes }}
          
          ### Installation
          
          **From NuGet.org:**
          ```bash
          dotnet add package Fluent.Garmin --version ${{ steps.version.outputs.version }}
          ```
        draft: false
        prerelease: false
        files: ./artifacts/*.nupkg
        
    - name: Update any existing pre-release
      run: |
        # This step will mark any existing pre-release as not pre-release anymore
        # since we now have an official release
        echo "Official release v${{ steps.version.outputs.version }} published successfully"