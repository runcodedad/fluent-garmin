using System.ComponentModel;
using System.Text.Json;
using Microsoft.SemanticKernel;

namespace Fluent.Garmin.AI;

/// <summary>
/// Semantic Kernel plugin for creating Garmin workouts from AI-generated JSON plans
/// </summary>
public class GarminWorkoutPlugin
{
    /// <summary>
    /// Creates a Garmin workout from a JSON plan generated by an LLM
    /// </summary>
    /// <param name="jsonPlan">JSON string containing the workout plan</param>
    /// <returns>A WorkoutModel that can be used to generate FIT files</returns>
    [KernelFunction, Description("Creates a Garmin workout from a JSON workout plan")]
    public WorkoutModel CreateWorkoutFromJson(
        [Description("JSON string containing the workout plan with steps, durations, and targets")] 
        string jsonPlan)
    {
        try
        {
            var workoutPlan = JsonSerializer.Deserialize<WorkoutPlan>(jsonPlan, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                AllowTrailingCommas = true
            });

            if (workoutPlan == null)
                throw new ArgumentException("Invalid JSON workout plan");

            return ConvertToWorkoutModel(workoutPlan);
        }
        catch (JsonException ex)
        {
            throw new ArgumentException($"Failed to parse JSON workout plan: {ex.Message}", ex);
        }
    }

    /// <summary>
    /// Creates a Garmin workout file from a JSON plan
    /// </summary>
    /// <param name="jsonPlan">JSON string containing the workout plan</param>
    /// <param name="fileName">Output file name (should end with .fit)</param>
    /// <returns>Path to the created workout file</returns>
    [KernelFunction, Description("Creates a Garmin FIT workout file from a JSON workout plan")]
    public string CreateWorkoutFile(
        [Description("JSON string containing the workout plan")] string jsonPlan,
        [Description("Output filename for the FIT file (should end with .fit)")] string fileName)
    {
        var workoutModel = CreateWorkoutFromJson(jsonPlan);
        
        // Ensure filename has .fit extension
        if (!fileName.EndsWith(".fit", StringComparison.OrdinalIgnoreCase))
        {
            fileName += ".fit";
        }

        WorkoutGenerator.GenerateWorkoutFile(workoutModel, fileName);
        return fileName;
    }

    /// <summary>
    /// Validates a JSON workout plan without creating the workout
    /// </summary>
    /// <param name="jsonPlan">JSON string to validate</param>
    /// <returns>Validation result with any error messages</returns>
    [KernelFunction, Description("Validates a JSON workout plan format")]
    public string ValidateWorkoutPlan(
        [Description("JSON string containing the workout plan to validate")] string jsonPlan)
    {
        try
        {
            var workoutPlan = JsonSerializer.Deserialize<WorkoutPlan>(jsonPlan, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                AllowTrailingCommas = true
            });

            if (workoutPlan == null)
                return "Invalid: JSON plan is null";

            if (string.IsNullOrWhiteSpace(workoutPlan.Name))
                return "Warning: Workout name is empty";

            if (workoutPlan.Steps.Count == 0)
                return "Warning: Workout has no steps";

            // Basic validation of steps
            for (int i = 0; i < workoutPlan.Steps.Count; i++)
            {
                var step = workoutPlan.Steps[i];
                
                if (string.IsNullOrWhiteSpace(step.Name))
                    return $"Warning: Step {i + 1} has no name";

                if (step.Duration.Value == 0 && step.Duration.Type != DurationType.Open)
                    return $"Warning: Step {i + 1} ({step.Name}) has zero duration";

                if (step.Type.Equals("repeat", StringComparison.OrdinalIgnoreCase) && step.RepeatSteps.Count == 0)
                    return $"Warning: Repeat step {i + 1} ({step.Name}) has no child steps";
            }

            return "Valid: Workout plan is properly formatted";
        }
        catch (JsonException ex)
        {
            return $"Invalid: JSON parsing error - {ex.Message}";
        }
        catch (Exception ex)
        {
            return $"Invalid: Validation error - {ex.Message}";
        }
    }

    /// <summary>
    /// Converts a WorkoutPlan to a WorkoutModel using the existing builder pattern
    /// </summary>
    private WorkoutModel ConvertToWorkoutModel(WorkoutPlan plan)
    {
        var builder = new WorkoutBuilder()
            .Name(plan.Name)
            .Sport(plan.Sport);

        foreach (var stepPlan in plan.Steps)
        {
            AddStepToBuilder(builder, stepPlan);
        }

        return builder.Build();
    }

    /// <summary>
    /// Adds a step plan to the workout builder
    /// </summary>
    private void AddStepToBuilder(IWorkoutBuilder builder, StepPlan stepPlan)
    {
        var stepType = stepPlan.Type.ToLowerInvariant();

        switch (stepType)
        {
            case "warmup":
                builder.WarmUp(stepPlan.Duration.Minutes, stepPlan.Target.Zone, stepPlan.Target.Type);
                break;

            case "cooldown":
                builder.CoolDown(stepPlan.Duration.Minutes, stepPlan.Target.Zone, stepPlan.Target.Type);
                break;

            case "repeat":
                if (stepPlan.RepeatSteps.Count > 0)
                {
                    var repeatSteps = stepPlan.RepeatSteps.Select(ConvertToWorkoutStep).ToArray();
                    builder.AddRepeat(stepPlan.Name, stepPlan.RepeatCount, repeatSteps);
                }
                break;

            default:
                // Regular step
                builder.AddStep(
                    stepPlan.Name,
                    stepPlan.Duration.Type,
                    stepPlan.Duration.Value,
                    stepPlan.Intensity,
                    stepPlan.Target.Type,
                    stepPlan.Target.Zone
                );
                break;
        }
    }

    /// <summary>
    /// Converts a StepPlan to a WorkoutStep for repeat structures
    /// </summary>
    private WorkoutStep ConvertToWorkoutStep(StepPlan stepPlan)
    {
        var step = new WorkoutStep
        {
            Name = stepPlan.Name,
            Duration = new StepDuration
            {
                Type = stepPlan.Duration.Type,
                Value = stepPlan.Duration.Value
            },
            Intensity = stepPlan.Intensity,
            Target = new StepTarget
            {
                Type = stepPlan.Target.Type,
                Zone = stepPlan.Target.Zone,
                LowValue = stepPlan.Target.LowValue,
                HighValue = stepPlan.Target.HighValue
            }
        };

        return step;
    }
}